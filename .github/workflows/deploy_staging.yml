name: Deploy to Staging

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: Preview
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/rb-cmp-backend:dev
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Create deployment directory on EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          mkdir -p ~/rb-backend-deploy
        
    - name: Copy docker-compose.yml to EC2
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "docker-compose.dev.yml"
        target: "~/rb-backend-deploy/"
        overwrite: true
        
    - name: Zero-downtime deployment to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          cd ~/rb-backend-deploy
          
          # Set environment variables
          export DOCKER_USERNAME="${{ secrets.DOCKER_USERNAME }}"
          export OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"
          export PHOENIX_API_KEY="${{ secrets.PHOENIX_API_KEY }}"
          export PHOENIX_ENDPOINT="${{ secrets.PHOENIX_ENDPOINT }}"
          export ENV="${{ secrets.ENV }}"
          export FRAPPE_BACKEND_BASE_URL="${{ secrets.FRAPPE_BACKEND_BASE_URL }}"
          export FRAPPE_BACKEND_CLIENT_ID="${{ secrets.FRAPPE_BACKEND_CLIENT_ID }}"
          export FRAPPE_BACKEND_CLIENT_SECRET="${{ secrets.FRAPPE_BACKEND_CLIENT_SECRET }}"
          export DATABASE_URL="${{ secrets.DATABASE_URL }}"
          
          # Get service name from docker-compose file
          SERVICE_NAME=$(docker-compose -f docker-compose.dev.yml config --services | head -1)
          echo "🔧 Using service: $SERVICE_NAME"
          
          # Pull the latest image while old container is still running
          echo "🔄 Pulling latest image..."
          docker-compose -f docker-compose.dev.yml pull $SERVICE_NAME
          
          # Perform rolling update - this recreates the container with zero downtime
          echo "🚀 Performing rolling update..."
          docker-compose -f docker-compose.dev.yml up -d --force-recreate --no-deps $SERVICE_NAME
          
          # Wait for the service to be healthy
          echo "⏳ Waiting for service to be healthy..."
          timeout=180
          elapsed=0
          while [ $elapsed -lt $timeout ]; do
            if docker-compose -f docker-compose.dev.yml exec -T $SERVICE_NAME curl -f http://localhost:8001/health > /dev/null 2>&1; then
              echo "✅ Service is healthy!"
              break
            fi
            echo "⏳ Waiting for health check... ($elapsed/$timeout seconds)"
            sleep 5
            elapsed=$((elapsed + 5))
          done
          
          if [ $elapsed -ge $timeout ]; then
            echo "❌ Health check failed after $timeout seconds"
            echo "📋 Container logs:"
            docker-compose -f docker-compose.dev.yml logs --tail=50 $SERVICE_NAME
            exit 1
          fi
          
          # Show running containers
          echo "📋 Running containers:"
          docker-compose -f docker-compose.dev.yml ps
          
          # Clean up dangling and unused images (but keep currently used ones)
          echo "🧹 Cleaning up unused Docker images..."
          docker image prune -f

          echo "🎉 Zero-downtime deployment completed successfully!" 